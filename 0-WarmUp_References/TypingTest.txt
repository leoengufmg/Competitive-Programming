Familiarize with the positions of the following following keyboard keyboard keys:
	(,),{,},[,],<,>,’,”,&,|,!,etc


– http://www.typingtest.com
Aesop's fables
– Mine: ~50 wpm

// Big factorial
int *a = new int[100]{0};

int product = a[i]*no+carry;
a[i] = product % 10;
carry = product / 10;


// Java Big Interger Class

import java.math.BigInteger; 
import java.util.Scanner;

Scanner sc = new Scanner(System.in);
int s1 = sc.nextInt();
System.out.println(s1*s1);

BigInteger one = new BigInteger("1"); 
BigInteger two = new BigInteger("12345678987654321");
System.out.println(two.add(one));

// read a string as a big Interger
String s2 = sc.next();

// Read as a binary number:b2 1001 is b10 9 BigInteger three = new BigInteger(s2, 2);
BigInteger three = new BigInteger(s2, 10);
String s3 = "1001";
String s4 = "100";
BigInteger B3 = new BigInteger(s3, 2);
BigInteger B4 = new BigInteger(s4, 2);

// Operations 
B3 = B3.multiply(B4);
B3 = B3.add(B4);
B3 = B3.divide(B4);
B3 = B3.multiply(B4);

// GCD using Big Integer
BigInteger b0 = new BigInteger("20");
// Method valueOf converts long int into your int
BigInteger b1 = BigInteger.valueOf(12);
System.out.println(b1.gcd(b0));


// next probable Print - automaticaly generates your next prime number
BigInteger p1 = BigInteger.valueOf(5);
System.out.println(p1.nextProbablePrime());
    
// BitWise count of the set of Bits
BigInteger Bit1 = BigInteger.valueOf(100);
System.out.println(Bit1.bitCount());
        
    }

// Factorial
BigInteger fac = BigInteger.valueOf(1);
for(int i = 2; i <=N; i++)
{
	fac = fac.multiply(BigInteger.valueOf(i));
}



// template
template <class T>


// sizeof
int a[] = {5,4,3,1,2,6,7};
int n = sizeof(a)/sizeof(int);